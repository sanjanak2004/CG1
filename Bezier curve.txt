#include <iostream>
#include <cmath>  // For math functions
#include <ctime>  // For time functions
#include <GL/glut.h>

// Global arrays for storing four control points
int x[4], y[4];

void init() {
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 640, 0, 480);
    glClear(GL_COLOR_BUFFER_BIT);
}

void putpixel(int xt, int yt) {
    glColor3f(1, 0, 0);
    glBegin(GL_POINTS);
    glVertex2i(xt, yt);
    glEnd();
    glFlush();
}

void Algorithm() {
    glColor3f(0, 1, 0);
    glBegin(GL_LINES);
    glVertex2i(x[0], y[0]);
    glVertex2i(x[1], y[1]);
    glVertex2i(x[1], y[1]);
    glVertex2i(x[2], y[2]);
    glVertex2i(x[2], y[2]);
    glVertex2i(x[3], y[3]);
    glEnd();
    glFlush();

    double t;
    for (t = 0.0; t < 1.0; t += 0.01) {
        double xt = pow(1 - t, 3) * x[0] + 3 * t * pow(1 - t, 2) * x[1] + 3 * pow(t, 2) * (1 - t) * x[2] + pow(t, 3) * x[3];
        double yt = pow(1 - t, 3) * y[0] + 3 * t * pow(1 - t, 2) * y[1] + 3 * pow(t, 2) * (1 - t) * y[2] + pow(t, 3) * y[3];
        putpixel(static_cast<int>(xt), static_cast<int>(yt));
    }
}

int main(int argc, char** argv) {
    std::cout << "\nEnter The Four Points (x, y): ";
    for (int i = 0; i < 4; i++) {
        std::cout << "\nEnter x and y for point " << i + 1 << ": ";
        std::cin >> x[i] >> y[i];
    }

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(200, 200);
    glutCreateWindow("Bezier 4 point");

    init();
    glutDisplayFunc(Algorithm);
    glutMainLoop();

    return 0;
}




//g++ -o bezier bezier.cpp -lGL -lGLU -lglut
//./bezier
//Enter The Four Points (x, y)
//Enter x and y for point 1: 100 100
//Enter x and y for point 2: 200 300
//Enter x and y for point 3: 400 350
//Enter x and y for point 4: 500 150
