#include <iostream>
#include <GL/glut.h>

using namespace std;

// Clipping boundaries (window)
const int xmin = 100, xmax = 400, ymin = 100, ymax = 300;

// Line endpoints
int x1, y1, x2, y2;

// Function to compute the region code for a point
int computeCode(int x, int y) {
    int code = 0;
    if (x < xmin)
        code |= 1; // Left
    if (x > xmax)
        code |= 2; // Right
    if (y < ymin)
        code |= 4; // Bottom
    if (y > ymax)
        code |= 8; // Top
    return code;
}

// Function to clip the line using Cohen-Sutherland algorithm
void cohenSutherlandLineClip() {
    bool accept = false;
    bool done = false;

    int code1 = computeCode(x1, y1);
    int code2 = computeCode(x2, y2);

    do {
        if ((code1 & code2) != 0) {
            // Trivially rejected; both endpoints are outside the same region
            done = true;
        } else if ((code1 | code2) == 0) {
            // Trivially accepted; both endpoints are inside the window
            accept = true;
            done = true;
        } else {
            // Clipping required
            int codeOut = (code1 != 0) ? code1 : code2;
            int x, y;

            // Calculate intersection point
            if (codeOut & 8) { // Top
                x = x1 + (x2 - x1) * (ymax - y1) / (y2 - y1);
                y = ymax;
            } else if (codeOut & 4) { // Bottom
                x = x1 + (x2 - x1) * (ymin - y1) / (y2 - y1);
                y = ymin;
            } else if (codeOut & 2) { // Right
                y = y1 + (y2 - y1) * (xmax - x1) / (x2 - x1);
                x = xmax;
            } else { // Left
                y = y1 + (y2 - y1) * (xmin - x1) / (x2 - x1);
                x = xmin;
            }

            if (codeOut == code1) {
                x1 = x;
                y1 = y;
                code1 = computeCode(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                code2 = computeCode(x2, y2);
            }
        }
    } while (!done);

    if (accept) {
        // Draw the clipped line
        glColor3f(0.0, 1.0, 0.0); // Green color for clipped line
        glBegin(GL_LINES);
        glVertex2i(x1, y1);
        glVertex2i(x2, y2);
        glEnd();
    }
}

// Display callback function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw the original line
    glColor3f(1.0, 0.0, 0.0); // Red color for original line
    glBegin(GL_LINES);
    glVertex2i(x1, y1);
    glVertex2i(x2, y2);
    glEnd();

    // Clip the line
    cohenSutherlandLineClip();

    glFlush();
}

// Keyboard callback function
void keyboard(unsigned char key, int x, int y) {
    if (key == 27) // ASCII code for Escape key
        exit(0);   // Exit the program if Escape is pressed
}

int main(int argc, char** argv) {
    cout << "Enter endpoints of the line (x1 y1 x2 y2): ";
    cin >> x1 >> y1 >> x2 >> y2;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 400);
    glutCreateWindow("Cohen-Sutherland Line Clipping");

    gluOrtho2D(0, 500, 0, 400);
    glClearColor(1.0, 1.0, 1.0, 1.0); // White background

    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);

    glutMainLoop();

    return 0;
}


//Entirely Inside Window: Enter 150 150 300 250 and press Enter.
//Entirely Outside Window: Enter 50 50 80 80 and press Enter.
//Partially Inside and Outside Window: Enter 200 150 350 350 and press Enter.
//Diagonal Line Across the Window: Enter 50 50 450 450 and press Enter.
//Horizontal or Vertical Lines: Enter 50 200 450 200 and press Enter.