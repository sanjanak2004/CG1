#include <iostream>
#include <GL/glut.h>
#include <vector>
#include <stack>

using namespace std;

const int WIDTH = 640;
const int HEIGHT = 480;

// Function to set a pixel color at (x, y)
void setPixel(int x, int y, float r, float g, float b) {
    glColor3f(r, g, b);
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
    glFlush();
}

// Function for boundary fill using iterative approach (flood fill)
void boundaryFill(int x, int y, float fillColorR, float fillColorG, float fillColorB, float borderColorR, float borderColorG, float borderColorB) {
    stack<pair<int, int>> pixels;
    pixels.push(make_pair(x, y));

    while (!pixels.empty()) {
        int cx = pixels.top().first;
        int cy = pixels.top().second;
        pixels.pop();

        // Check if the current pixel is within the border color
        float currentPixel[3];
        glReadPixels(cx, cy, 1, 1, GL_RGB, GL_FLOAT, currentPixel);

        if (currentPixel[0] != borderColorR || currentPixel[1] != borderColorG || currentPixel[2] != borderColorB) {
            // Set the pixel color to the fill color
            setPixel(cx, cy, fillColorR, fillColorG, fillColorB);

            // Push neighboring pixels onto the stack for further processing
            pixels.push(make_pair(cx + 1, cy));
            pixels.push(make_pair(cx - 1, cy));
            pixels.push(make_pair(cx, cy + 1));
            pixels.push(make_pair(cx, cy - 1));
        }
    }
}

// Mouse callback function to trigger boundary fill on left click
void mouseCallback(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        y = HEIGHT - y; // Invert y-coordinate to match OpenGL's bottom-left origin
        boundaryFill(x, y, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f); // Fill with red (1.0, 0.0, 0.0), border color white (1.0, 1.0, 1.0)
    }
}

// Function to render the display
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw the polygon (triangle) with black outline
    glColor3f(0.0f, 0.0f, 0.0f);
    glBegin(GL_LINE_LOOP);
    glVertex2i(200, 200);
    glVertex2i(400, 400);
    glVertex2i(200, 400);
    glEnd();

    glFlush();
}

// Initialization function
void init() {
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // White background color
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, WIDTH, 0, HEIGHT);
}

// Main function
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WIDTH, HEIGHT);
    glutCreateWindow("Boundary Fill Polygon Filling");

    // Register display and mouse callback functions
    glutDisplayFunc(display);
    glutMouseFunc(mouseCallback);

    init(); // Initialize OpenGL settings

    glutMainLoop(); // Enter the main loop

    return 0;
}


//g++ -o boundary_fill boundary_fill.cpp -lGL -lGLU -lglut
//./boundary_fill
//Use the left mouse button to click inside the triangle (polygon) displayed.
//Click anywhere inside the triangle to trigger the boundary fill algorithm.
