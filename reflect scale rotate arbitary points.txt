#include <iostream>
#include <cmath>
#include <GL/glut.h>
#include <vector>

using namespace std;

int edge;
vector<int> xpoint;
vector<int> ypoint;
int ch;

void init() {
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 640, 0, 480);
    glClear(GL_COLOR_BUFFER_BIT);
}

void drawPolygon() {
    glColor3f(0.0, 0.0, 1.0); // Blue color for polygon
    glBegin(GL_POLYGON);
    for (int i = 0; i < edge; i++) {
        glVertex2i(xpoint[i], ypoint[i]);
    }
    glEnd();
    glFlush();
}

void scale() {
    float sx, sy;
    cout << "Enter scaling factors (sx, sy): ";
    cin >> sx >> sy;

    for (int i = 0; i < edge; i++) {
        xpoint[i] = round((xpoint[i] - 320) * sx) + 320;
        ypoint[i] = round((ypoint[i] - 240) * sy) + 240;
    }

    drawPolygon();
}

void rotate() {
    int cx, cy;
    float theta;
    cout << "Enter rotation center (cx, cy): ";
    cin >> cx >> cy;
    cout << "Enter rotation angle (degrees): ";
    cin >> theta;

    theta = theta * M_PI / 180.0;

    for (int i = 0; i < edge; i++) {
        int x = xpoint[i];
        int y = ypoint[i];
        xpoint[i] = round((x - cx) * cos(theta) - (y - cy) * sin(theta)) + cx;
        ypoint[i] = round((x - cx) * sin(theta) + (y - cy) * cos(theta)) + cy;
    }

    drawPolygon();
}

void reflect() {
    char axis;
    cout << "Enter reflection axis ('x' or 'y'): ";
    cin >> axis;

    if (axis == 'x' || axis == 'X') {
        for (int i = 0; i < edge; i++) {
            ypoint[i] = -ypoint[i] + 480; // Reflect over x-axis
        }
    } else if (axis == 'y' || axis == 'Y') {
        for (int i = 0; i < edge; i++) {
            xpoint[i] = -xpoint[i] + 640; // Reflect over y-axis
        }
    }

    drawPolygon();
}

void displayMenu() {
    cout << "Menu:\n";
    cout << "1. Scale\n";
    cout << "2. Rotate\n";
    cout << "3. Reflect\n";
    cout << "4. Exit\n";
    cout << "Enter your choice: ";
    cin >> ch;

    switch (ch) {
        case 1:
            scale();
            break;
        case 2:
            rotate();
            break;
        case 3:
            reflect();
            break;
        case 4:
            exit(0); // Exit the program
        default:
            cout << "Invalid choice! Please try again.\n";
            break;
    }

    displayMenu(); // Display menu recursively
}

int main(int argc, char** argv) {
    cout << "Enter number of edges for the polygon: ";
    cin >> edge;

    cout << "Enter vertices of the polygon (x, y):\n";
    for (int i = 0; i < edge; i++) {
        int x, y;
        cout << "Vertex " << i + 1 << ": ";
        cin >> x >> y;
        xpoint.push_back(x);
        ypoint.push_back(y);
    }

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(200, 200);
    glutCreateWindow("2D Transformations");

    init();
    glutDisplayFunc(drawPolygon);

    displayMenu(); // Start displaying the transformation menu

    glutMainLoop();

    return 0;
}
