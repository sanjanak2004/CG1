#include <iostream>
#include <cmath>
#include <GL/glut.h>
#include <vector>

using namespace std;

// Define constants
const int WINDOW_WIDTH = 640;
const int WINDOW_HEIGHT = 480;
const int CENTER_X = WINDOW_WIDTH / 2;
const int CENTER_Y = WINDOW_HEIGHT / 2;

int edge;  // Number of edges of the polygon
vector<int> xpoints;
vector<int> ypoints;

// Function to draw a polygon
void drawPolygon() {
    glBegin(GL_POLYGON);
    glColor3f(0.0, 0.0, 1.0);  // Blue color
    for (int i = 0; i < edge; ++i) {
        glVertex2i(xpoints[i], ypoints[i]);
    }
    glEnd();
    glFlush();
}

// Function to perform translation of the polygon
void translate(int tx, int ty) {
    for (int i = 0; i < edge; ++i) {
        xpoints[i] += tx;
        ypoints[i] += ty;
    }
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
}

// Function to perform scaling of the polygon
void scale(float sx, float sy) {
    for (int i = 0; i < edge; ++i) {
        xpoints[i] = round(xpoints[i] * sx);
        ypoints[i] = round(ypoints[i] * sy);
    }
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
}

// Function to perform rotation of the polygon
void rotate(int angle) {
    float theta = angle * M_PI / 180.0;
    int cx = xpoints[0];  // Reference point (first vertex) as center of rotation
    int cy = ypoints[0];

    for (int i = 0; i < edge; ++i) {
        int x = xpoints[i];
        int y = ypoints[i];
        xpoints[i] = round(cx + (x - cx) * cos(theta) - (y - cy) * sin(theta));
        ypoints[i] = round(cy + (x - cx) * sin(theta) + (y - cy) * cos(theta));
    }
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
}

// Display callback function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawPolygon();
    glFlush();
}

// Initialize OpenGL
void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);  // White background color
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, WINDOW_WIDTH, 0, WINDOW_HEIGHT);
}

int main(int argc, char** argv) {
    cout << "Enter number of edges for the polygon: ";
    cin >> edge;

    // Get polygon vertices
    cout << "Enter vertices (x y) for the polygon:" << endl;
    for (int i = 0; i < edge; ++i) {
        int x, y;
        cout << "Vertex " << i + 1 << ": ";
        cin >> x >> y;
        xpoints.push_back(x + CENTER_X);
        ypoints.push_back(y + CENTER_Y);
    }

    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow("2D Polygon Transformations");
    init();

    // Set display function
    glutDisplayFunc(display);

    // Interaction loop for transformations
    while (true) {
        cout << "\nChoose Transformation:" << endl;
        cout << "1. Translate" << endl;
        cout << "2. Scale" << endl;
        cout << "3. Rotate" << endl;
        cout << "4. Exit" << endl;
        int choice;
        cin >> choice;

        if (choice == 4)
            break;

        switch (choice) {
            case 1: {
                int tx, ty;
                cout << "Enter translation (Tx Ty): ";
                cin >> tx >> ty;
                translate(tx, ty);
                break;
            }
            case 2: {
                float sx, sy;
                cout << "Enter scaling factors (Sx Sy): ";
                cin >> sx >> sy;
                scale(sx, sy);
                break;
            }
            case 3: {
                int angle;
                cout << "Enter rotation angle (degrees): ";
                cin >> angle;
                rotate(angle);
                break;
            }
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}

//g++ -o polygon_transform polygon_transform.cpp -lglut -lGLU -lGL
//./polygon_transform
//Enter number of edges for the polygon: 3
//Enter vertices (x y) for the polygon: Vertex 1: -50 -50 Vertex 2: 50 -50 Vertex 3: 0 50
//Enter translation (Tx Ty): 50 50
//Enter scaling factors (Sx Sy): 1.5 1.5
//Enter rotation angle (degrees): 45

